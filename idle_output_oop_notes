Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.

= RESTART: C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py
A TMAl source
Traceback (most recent call last):
  File "C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py", line 126, in <module>
    source_lst = [TMAl, TMGa]
NameError: name 'TMGa' is not defined
TMAl
<__main__.TMAl_Source object at 0x0000029670F2D370>
TMAl.A
8.224
dir(TMAl)
['A', 'B', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'blocking_valve', 'bubbler_in_valve', 'bubbler_out_valve', 'calculate_mass', 'check_function', 'mass_flow_controler', 'molar_mass', 'name', 'pressure_flow_controler', 't']
help(TMAl)
Help on TMAl_Source in module __main__ object:

class TMAl_Source(builtins.object)
 |  # TODO make class for
 |
 |  Methods defined here:
 |
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  __lt__(self, other)
 |      Return self<value.
 |
 |  __str__(self)
 |      Return str(self).
 |
 |  calculate_mass(self, row)
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object

import numpy as no
import numpy as np
help(np.array)
Help on built-in function array in module numpy:

array(...)
    array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0,
          like=None)

    Create an array.

    Parameters
    ----------
    object : array_like
        An array, any object exposing the array interface, an object whose
        ``__array__`` method returns an array, or any (nested) sequence.
        If object is a scalar, a 0-dimensional array containing object is
        returned.
    dtype : data-type, optional
        The desired data-type for the array. If not given, NumPy will try to use
        a default ``dtype`` that can represent the values (by applying promotion
        rules when necessary.)
    copy : bool, optional
        If ``True`` (default), then the array data is copied. If ``None``,
        a copy will only be made if ``__array__`` returns a copy, if obj is
        a nested sequence, or if a copy is needed to satisfy any of the other
        requirements (``dtype``, ``order``, etc.). Note that any copy of
        the data is shallow, i.e., for arrays with object dtype, the new
        array will point to the same objects. See Examples for `ndarray.copy`.
        For ``False`` it raises a ``ValueError`` if a copy cannot be avoided.
        Default: ``True``.
    order : {'K', 'A', 'C', 'F'}, optional
        Specify the memory layout of the array. If object is not an array, the
        newly created array will be in C order (row major) unless 'F' is
        specified, in which case it will be in Fortran order (column major).
        If object is an array the following holds.

        ===== ========= ===================================================
        order  no copy                     copy=True
        ===== ========= ===================================================
        'K'   unchanged F & C order preserved, otherwise most similar order
        'A'   unchanged F order if input is F and not C, otherwise C order
        'C'   C order   C order
        'F'   F order   F order
        ===== ========= ===================================================

        When ``copy=None`` and a copy is made for other reasons, the result is
        the same as if ``copy=True``, with some exceptions for 'A', see the
        Notes section. The default order is 'K'.
    subok : bool, optional
        If True, then sub-classes will be passed-through, otherwise
        the returned array will be forced to be a base-class array (default).
    ndmin : int, optional
        Specifies the minimum number of dimensions that the resulting
        array should have.  Ones will be prepended to the shape as
        needed to meet this requirement.
    like : array_like, optional
        Reference object to allow the creation of arrays which are not
        NumPy arrays. If an array-like passed in as ``like`` supports
        the ``__array_function__`` protocol, the result will be defined
        by it. In this case, it ensures the creation of an array object
        compatible with that passed in via this argument.

        .. versionadded:: 1.20.0

    Returns
    -------
    out : ndarray
        An array object satisfying the specified requirements.

    See Also
    --------
    empty_like : Return an empty array with shape and type of input.
    ones_like : Return an array of ones with shape and type of input.
    zeros_like : Return an array of zeros with shape and type of input.
    full_like : Return a new array with shape of input filled with value.
    empty : Return a new uninitialized array.
    ones : Return a new array setting values to one.
    zeros : Return a new array setting values to zero.
    full : Return a new array of given shape filled with value.
    copy: Return an array copy of the given object.


    Notes
    -----
    When order is 'A' and ``object`` is an array in neither 'C' nor 'F' order,
    and a copy is forced by a change in dtype, then the order of the result is
    not necessarily 'C' as expected. This is likely a bug.

    Examples
    --------
    >>> np.array([1, 2, 3])
    array([1, 2, 3])

    Upcasting:

    >>> np.array([1, 2, 3.0])
    array([ 1.,  2.,  3.])

    More than one dimension:

    >>> np.array([[1, 2], [3, 4]])
    array([[1, 2],
           [3, 4]])

    Minimum dimensions 2:

    >>> np.array([1, 2, 3], ndmin=2)
    array([[1, 2, 3]])

    Type provided:

    >>> np.array([1, 2, 3], dtype=complex)
    array([ 1.+0.j,  2.+0.j,  3.+0.j])

    Data-type consisting of more than one element:

    >>> x = np.array([(1,2),(3,4)],dtype=[('a','<i4'),('b','<i4')])
    >>> x['a']
    array([1, 3])

    Creating an array from sub-classes:

    >>> np.array(np.asmatrix('1 2; 3 4'))
    array([[1, 2],
           [3, 4]])

    >>> np.array(np.asmatrix('1 2; 3 4'), subok=True)
    matrix([[1, 2],
            [3, 4]])


= RESTART: C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py
A TMAl source
Traceback (most recent call last):
  File "C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py", line 129, in <module>
    source_lst = [TMAl, TMGa]
NameError: name 'TMGa' is not defined
help(TMAl)
Help on TMAl_Source in module __main__ object:

class TMAl_Source(builtins.object)
 |  # TODO make class for
 |
 |  Methods defined here:
 |
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  __lt__(self, other)
 |      Return self<value.
 |
 |  __str__(self)
 |      Return str(self).
 |
 |  calculate_mass(self, row)
 |      A method to calculate mass given a row of data from the SMI logs.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object

a = ''' test


hello'''
print(a)
 test


hello
df
Traceback (most recent call last):
  File "<pyshell#13>", line 1, in <module>
    df
NameError: name 'df' is not defined
liters_to_grams(1)
Traceback (most recent call last):
  File "<pyshell#14>", line 1, in <module>
    liters_to_grams(1)
  File "C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py", line 57, in liters_to_grams
    partial_pressure_torr = 10 ** (A - (B / (t + STANDARD_TEMPERATURE_KELVIN)))
NameError: name 'A' is not defined. Did you mean: 'a'?

= RESTART: C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py
A TMAl source
Traceback (most recent call last):
  File "C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py", line 129, in <module>
    source_lst = [TMAl, TMGa]
NameError: name 'TMGa' is not defined
liters_to_grams(1, TMAl)
Traceback (most recent call last):
  File "<pyshell#15>", line 1, in <module>
    liters_to_grams(1, TMAl)
  File "C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py", line 58, in liters_to_grams
    mols = (source.partial_pressure_torr * liters) / (R_TORR_LITERS * (source.t + STANDARD_TEMPERATURE_KELVIN))
AttributeError: 'TMAl_Source' object has no attribute 'partial_pressure_torr'

= RESTART: C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py
A TMAl source
Traceback (most recent call last):
  File "C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py", line 129, in <module>
    source_lst = [TMAl, TMGa]
NameError: name 'TMGa' is not defined
liters_to_grams(1, TMAl)
Traceback (most recent call last):
  File "<pyshell#16>", line 1, in <module>
    liters_to_grams(1, TMAl)
  File "C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py", line 59, in liters_to_grams
    grams = molar_mass * mols
NameError: name 'molar_mass' is not defined

= RESTART: C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py
A TMAl source
Traceback (most recent call last):
  File "C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py", line 129, in <module>
    source_lst = [TMAl, TMGa]
NameError: name 'TMGa' is not defined

= RESTART: C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py
A TMAl source
Traceback (most recent call last):
  File "C:\Users\gma78\OneDrive - Simon Fraser University (1sfu)\Code\MOCVD Data Analyzer\mocvd_data_analysis.py", line 129, in <module>
    source_lst = [TMAl, TMGa]
NameError: name 'TMGa' is not defined
liters_to_grams(1, TMAl)
0.011354596322042224
TMAl.A = 16
liters_to_grams(1, TMAl)
677909.4669174257
